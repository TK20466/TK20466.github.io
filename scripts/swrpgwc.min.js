var module = angular.module("starship", []);

module.directive("vehicle", function() {
    return {
        templateUrl: "/views/vehicle.html",
        replace: true,
        restrict: "E",
        transclude: true,
        scope: {
            model: "=?",
            name: "@",
            silhouette: "=?",
            speed: "=?",
            handling: "=?",
            fore: "=?",
            aft: "=?",
            port: "=?",
            starboard: "=?",
            armor: "=?",
            system: "=?",
            hull: "=?",
            hardpoints: "=?",
            sensorRange: "@",
            price: "@",
            rarity: "=?",
            hardpoints: "=?",
            passengers: "=?",
            crew: "@",
            encum: "=?",
            navicomputer: "=?",
            hyperdrive: "@",
            maker: "@",
            type: "@",
            ship: "@",
            consumables: "@"
        },
        controller: ["$scope", function($scope) {
            if ($scope.model == null) {
                $scope.model = {
                    name: $scope.name,
                    silhouette: $scope.silhouette || 3,
                    speed: $scope.speed || 1,
                    handling: $scope.handling || 0,
                    fore: $scope.fore || 0,
                    port: $scope.port || 0,
                    starboard: $scope.starboard || 0,
                    aft: $scope.aft || 0,
                    armor: $scope.armor || 0,
                    hull: $scope.hull || 10,
                    system: $scope.system || 6,
                    hardpoints: $scope.hardpoints || 0,
                    sensorRange: $scope.sensorRange || "Close",
                    price: $scope.price,
                    rarity: $scope.rarity,
                    passengers: $scope.passengers || 0,
                    crew: $scope.crew || "One pilot",
                    navicomputer: $scope.navicomputer == true ? "Yes" : "None" || "None",
                    hyperdrive: $scope.hyperdrive || "none",
                    maker: $scope.maker,
                    type: $scope.type,
                    ship: $scope.ship,
                    consumables: $scope.consumables,
                    encum: $scope.encum || 6,
                    weapons: []
                }
                if ($scope.model.handling > 0) $scope.model.handling = "+" + $scope.model.handling;
            }
        }]
    }
});


module.directive("vehicleStatbar", function() {
    return {
        templateUrl: "/views/vehicle-statbar.html",
        restrict: "E",
        scope: {
            model: "=model",
        },

        replace: true
    }
});

module.directive("defenseBlock", function() {
    return {
        templateUrl: "/views/defense-block.html",
        restrict: "E",
        scope: {
            model: "=model",
        },
        controller: ['$scope', function($scope){
            if ($scope.model && $scope.model.silhouette < 4) {
                $scope.model.port = "-";
                $scope.model.starboard = "-";
            }
        }],
        replace: true
    }
});


module.directive("starshipWeapon", ['$sce', function($sce) {
    return {
        transclude: true,
        reaplce: true,
        restrict: "E",
        scope: {
            name: "@",
            damage: "=",
            critical: "=?",
            range: "@",
            blast: "=?",
            ion: "=?",
            guided: "=?",
            breach: "=?",
            slowFiring: "=?slowFire",
            limitedAmmo: "=?ammo",
            fireArc: "=?arc"
        },
        link: function(scope, element, attrs, ctrl, transclude) {
           var weapon = {
               name: scope.name,
               damage: scope.damage,
               critical: scope.critical,
               range: scope.range || "Short",
               blast: scope.blast,
               ion: scope.ion,
               guided: scope.guided,
               ammo: scope.limitedAmmo,
               breach: scope.breach,
               slowFiring: scope.slowFiring,
               fireArc: scope.fireArc || "Forward"
           };
           transclude(scope, function(clone, scope) {
               var html = "";
               for (var i = 0; i < clone.length; i++)
                   html += clone[i].wholeText || clone[i].outerHTML;
               weapon.text = $sce.trustAsHtml(html);
           });
           var scoped = scope.$parent.$parent.model;

           if (scoped.weapons == null)
               scoped.weapons = [];
           scoped.weapons.push(weapon);
        }
    }
}]);


module.directive("starshipWeaponsBlock", ["getSkillStat", function(getStat) {
    return {
        templateUrl: "/views/starship-weapon.html",
        scope: {
            weapons: "=?weapons"
        },
        replace: true
    }
}]);
;var app = angular.module("swrpgwc", ["starship", "jdf.ngThemeSwitcher", 'ngStorage']);

app.controller("ThemeController", function($scope, $localStorage, $location) {
   $scope.currentLocation = function() { return $location.path(); }
   $scope.themes = [
        { name:'EoE', description: 'Edge of Empire Theme', url:'/styles/swrpgeoe.min.css' },
        { name:'AoR', description: 'Age of Rebellion Theme', url:'/styles/swrpgaor.min.css' },
	{ name:'FaD', description: 'Force and Destiny Theme', url:'/styles/swrpgfad.min.css' }
   ];
   
   $scope.$storage = $localStorage.$default({
	   theme: $scope.themes[0]
   });

   $scope.setTheme = function(theme) {
	   if (theme.name !== $scope.theme.name) {
		   $scope.theme = theme;
		   $scope.$storage.theme = theme;
	   }
   };

   $scope.theme = $scope.$storage.theme;
});

app.directive("skills", function() {
    return {
        replace: true,
        restrict: "E",
        link: function ($scope, $element, $attributes) {
            if($scope.$parent.model.skills == null)
                $scope.$parent.model.skills = {};
            $scope.skills = $scope.$parent.model.skills;
        }
    }
});

app.directive("skillsBlock", function() {
    return {
        templateUrl: "/views/skills.html",
        replace: true,
        restrict: "E",
        link: function ($scope, $element, $attributes) {
            $scope.skills = $scope.model.skills;
            $scope.skillKeys = function() {
                var keys = [];
                for (k in $scope.model.skills) {
                    keys.push(k);
                }
                return keys.sort();
            }
            $scope.char = $scope.model;
            $scope.getAttr = function(key) {
                return $scope.char[$scope.skills[key].attribute];
            }
        }
    }
});


app.directive("skill", function() {
    return {
        templateUrl: "/views/skill.html",
        replace: true,
        restrict: "E",
        scope: {
            name: "=",
            rank: "=",
            abty: "=",
            minion: "=?",
            hideRank: "=?"
        },
        controller: ["$scope", function($scope) {
            $scope.pdice = new Array($scope.rank);
            if ($scope.abty > $scope.rank) {
                $scope.adice = new Array($scope.abty - $scope.rank);
                $scope.pdice = new Array($scope.rank);
            }
            else {
                $scope.adice = new Array($scope.rank - $scope.abty);
                $scope.pdice = new Array(Math.min($scope.rank, $scope.abty));
                /*var promote = Math.floor($scope.adice.length/2);
                for (var i = 0; i < promote; i++) {
                    $scope.pdice.push("");
                    $scope.adice.pop();
                    $scope.adice.pop();
                }*/
            }
        }]
    }
});

app.directive("statblock", function() {
    return {
        templateUrl: "/views/statblock.html",
        scope: {
            value: "=value",
            display: "@display"
        },
        replace: true
    }
});

app.directive('dynamic', ['$compile', function ($compile) {
  return {
    restrict: 'A',
    replace: true,
    link: function (scope, ele, attrs) {
      scope.$watch(attrs.dynamic, function(html) {
        ele.html(html);
        $compile(ele.contents())(scope);
      });
    }
  };
}]);

app.directive("talentBlock", function() {
    return {
        templateUrl: "/views/talents.html",
        scope: {
            talents: "=?talents"
        },
        replace: true
    }
});

app.directive("talents", ['$sce', function($sce) {
    return {
       transclude: true,
       restrict: "E",
       link: function(scope, element, attrs, ctrl, transclude) {
           transclude(scope, function(clone, scope) {
               var html = "";
               for (var i = 0; i < clone.length; i++)
                   html += clone[i].wholeText || clone[i].outerHTML;
               scope.$parent.model.talents = $sce.trustAsHtml(html);
           });
       }
    }
}]);


app.directive("abilitiesBlock", function() {
    return {
        templateUrl: "/views/abilities.html",
        scope: {
            abilities: "=?abilities"
        },
        replace: true
    }
});

app.directive("equipmentBlock", ["getSkillStat", function(getStat) {
    return {
        templateUrl: "/views/equipment.html",
        scope: {
            equipment: "=?equipment"
        },
        controller: ["$scope", function($scope) {
            $scope.getRank = function(skill) {
                if ($scope.$parent.skills[skill] == undefined)
                    return 0;
                return $scope.$parent.skills[skill].rank;
            }
            $scope.getAbility = function(skill) {
                var attr = getStat(skill);
                return $scope.$parent.model[attr];
            }
            $scope.isMinion = function() {
                return $scope.$parent.rank == "minion";
            }
        }],
        replace: true
    }
}]);

app.directive("abilities", ['$sce', function($sce) {
    return {
       transclude: true,
       restrict: "E",
       link: function(scope, element, attrs, ctrl, transclude) {
           transclude(scope, function(clone, scope) {
               var html = "";
               for (var i = 0; i < clone.length; i++)
                   html += clone[i].wholeText || clone[i].outerHTML;
               scope.$parent.model.abilities = $sce.trustAsHtml(html);
           });
       }
    }
}]);

app.directive("weapon", ['$sce', function($sce) {
    return {
        transclude: true,
        reaplce: true,
        restrict: "E",
        scope: {
            name: "@",
            skill: "@",
            damage: "=",
            critical: "=?",
            range: "@",
            blast: "=?",
            stun: "=?",
            quantity: "=?",
            pierce: "=?",
            vicious: "=?",
            autoFire: "=?autoFire",
            limitedAmmo: "=?ammo"
        },
        link: function(scope, element, attrs, ctrl, transclude) {
           var weapon = {
               name: scope.name,
               skill: scope.skill,
               damage: scope.damage,
               critical: scope.critical,
               range: scope.range,
               blast: scope.blast,
               quantity: scope.quantity,
               pierce: scope.pierce,
               ammo: scope.limitedAmmo,
               autoFire: scope.autoFire,
               vicious: scope.vicious
           };
           transclude(scope, function(clone, scope) {
               var html = "";
               for (var i = 0; i < clone.length; i++)
                   html += clone[i].wholeText || clone[i].outerHTML;
               weapon.text = $sce.trustAsHtml(html);
           });
           var scoped = scope.$parent.$parent.model;

           if (scoped.equipment == null)
               scoped.equipment = {};
           if (scoped.equipment.weapons == null)
               scoped.equipment.weapons = [];
           scoped.equipment.weapons.push(weapon);
        }
    }
}])

app.directive("detailBlock", function() {
    return {
        templateUrl: "/views/detailblock.html",
        scope: {
            value: "=value",
            display: "@display"
        },
        replace: true
    }
});

app.directive("detailbar", function() {
    return {
        templateUrl: "/views/detailbar.html",
        scope: {
            model: "=model"
        },
        replace: true
    }
});

app.directive("statbar", function() {
    return {
        templateUrl: "/views/statbar.html",
        scope: {
            model: "=model",
        },
        replace: true
    }
});

app.directive("die", function() {
    return {
        templateUrl: "/views/diesymbol.html",
        scope: {
            symbol: "@type",
        },
        restrict: "E",
        replace: true
    }
});

app.directive("setback", function() {
    return {
        templateUrl: "/views/diesymbol.html",
        replace: true,
        scope: {

        },
        restrict: "E",
        controller: ['$scope', function($scope) {
            $scope.symbol = "setback";
        }]
    }
});
app.directive("boost", function() {
    return {
        templateUrl: "/views/diesymbol.html",
        replace: true,
        scope: {

        },
        restrict: "E",
        controller: ['$scope', function($scope) {
            $scope.symbol = "boost";
        }]
    }
});
app.directive("ability", function() {
    return {
        templateUrl: "/views/diesymbol.html",
        replace: true,
        scope: {

        },
        restrict: "E",
        controller: ['$scope', function($scope) {
            $scope.symbol = "ability";
        }]
    }
});
app.directive("difficulty", function() {
    return {
        templateUrl: "/views/diesymbol.html",
        replace: true,
        scope: {

        },
        restrict: "E",
        controller: ['$scope', function($scope) {
            $scope.symbol = "difficulty";
        }]
    }
});
app.directive("challenge", function() {
    return {
        templateUrl: "/views/diesymbol.html",
        replace: true,
        scope: {

        },
        restrict: "E",
        controller: ['$scope', function($scope) {
            $scope.symbol = "challenge";
        }]
    }
});
app.directive("proficiency", function() {
    return {
        templateUrl: "/views/diesymbol.html",
        replace: true,
        scope: {

        },
        restrict: "E",
        controller: ['$scope', function($scope) {
            $scope.symbol = "proficiency";
        }]
    }
});
app.directive("success", function() {
    return {
        templateUrl: "/views/diesymbol.html",
        replace: true,
        scope: {

        },
        restrict: "E",
        controller: ['$scope', function($scope) {
            $scope.symbol = "success";
        }]
    }
});
app.directive("failure", function() {
    return {
        templateUrl: "/views/diesymbol.html",
        replace: true,
        scope: {

        },
        restrict: "E",
        controller: ['$scope', function($scope) {
            $scope.symbol = "failure";
        }]
    }
});
app.directive("advantage", function() {
    return {
        templateUrl: "/views/diesymbol.html",
        replace: true,
        scope: {

        },
        restrict: "E",
        controller: ['$scope', function($scope) {
            $scope.symbol = "advantage";
        }]
    }
});
app.directive("threat", function() {
    return {
        templateUrl: "/views/diesymbol.html",
        replace: true,
        scope: {

        },
        restrict: "E",
        controller: ['$scope', function($scope) {
            $scope.symbol = "threat";
        }]
    }
});
app.directive("triumph", function() {
    return {
        templateUrl: "/views/diesymbol.html",
        replace: true,
        scope: {

        },
        restrict: "E",
        controller: ['$scope', function($scope) {
            $scope.symbol = "triumph";
        }]
    }
});
app.directive("despair", function() {
    return {
        templateUrl: "/views/diesymbol.html",
        replace: true,
        scope: {

        },
        restrict: "E",
        controller: ['$scope', function($scope) {
            $scope.symbol = "despair";
        }]
    }
});

app.directive("force", function() {
    return {
        templateUrl: "/views/diesymbol.html",
        replace: true,
        scope: {

        },
        restrict: "E",
        controller: ['$scope', function($scope) {
            $scope.symbol = "force";
        }]
    }
});

app.directive("lightSide", function() {
    return {
        templateUrl: "/views/diesymbol.html",
        replace: true,
        scope: {

        },
        restrict: "E",
        controller: ['$scope', function($scope) {
            $scope.symbol = "lightSide";
        }]
    }
});

app.directive("darkSide", function() {
    return {
        templateUrl: "/views/diesymbol.html",
        replace: true,
        scope: {

        },
        restrict: "E",
        controller: ['$scope', function($scope) {
            $scope.symbol = "darkSide";
        }]
    }
});

app.directive("check", function() {
    return {
        templateUrl: "/views/check.html",
        replace: true,
        scope: {
            skill: "@skill",
            dif: "@dif",
            chg: "@chg",
        },
        controller: ['$scope', function($scope) {
            var dif = parseInt($scope.dif);
            $scope.difficulty_text = "";
            $scope.pdice = new Array(parseInt(dif));
            if ($scope.chg) {
                $scope.cdice = new Array(parseInt($scope.chg));
                dif += parseInt($scope.chg);
            }

            $scope.dif = dif;

            switch(dif) {
                case 0: {
                    $scope.difficulty_text = "Simple";
                    break;
                }
                case 1: {
                    $scope.difficulty_text = "Easy";
                    break;
                }
                case 2: {
                    $scope.difficulty_text = "Average";
                    break;
                }
                case 3: {
                    $scope.difficulty_text = "Hard";
                    break;
                }
                case 4: {
                    $scope.difficulty_text = "Daunting";
                    break;
                }
                default: {
                    $scope.difficulty_text = "Formidable";
                    break;
                }
            }
        }]
    }
});

app.directive("npc", function() {
    return {
        templateUrl: "/views/npc.html",
        replace: true,
        transclude: true,
        scope: {
            model: "=?",
            name: "@",
            rank: "@",
            brawn: "=?",
            agility: "=?",
            intellect: "=?",
            cunning: "=?",
            willpower: "=?",
            presence: "=?",
            wounds: "=?",
            soak: "=?",
            strain: "=?"
        },
        controller: ["$scope", function($scope) {
            if ($scope.model == null) {
                $scope.model = {
                    name: $scope.name,
                    rank: $scope.rank || "rival",
                    brawn: $scope.brawn || 1,
                    agility: $scope.agility || 1,
                    intellect: $scope.intellect || 1,
                    cunning: $scope.cunning || 1,
                    willpower: $scope.willpower || 1,
                    presence: $scope.presence || 1,
                    wounds: $scope.wounds || 10,
                    soak: $scope.soak,
                    strain: $scope.strain,
                    skills: {}
                }
            }
        }]
    }
});

app.directive("blackbox", function() {
    return {
        templateUrl: "/views/blackbox.html",
        replace: true,
        transclude: true,
        scope: {
            header: "@title"
        }
    }
});
app.directive("narrative", function() {
    return {
        templateUrl: "/views/redbox.html",
        replace: true,
        transclude: true,
        restrict: "E",
        scope: {
            header: "@title"
        }
    }
});


var skillsTree = function() { return [{name: "Astrogation",           attribute: "intellect",              },
{name: "Athletics",               attribute: "brawn",              },
{name: "Charm",                   attribute: "presence",              },
{name: "Coercion",                attribute: "willpower",            },
{name: "Computers",               attribute: "intellect",             },
{name: "Cool",                    attribute: "presence",              },
{name: "Coordination",            attribute: "agility",              },
{name: "Deception",               attribute: "cunning",             },
{name: "Discipline",              attribute: "willpower",            },
{name: "Leadership",              attribute: "presence",              },
{name: "Mechanics",               attribute: "intellect",             },
{name: "Medicine",                attribute: "intellect",             },
{name: "Negotiation",             attribute: "presence",              },
{name: "Perception",              attribute: "cunning",             },
{name: "Piloting (Planetary)",    attribute: "agility",              alias: "pilotingPlanetary"},
{name: "Piloting (Space)",        attribute: "agility",              alias: "pilotingSpace"},
{name: "Resilience",              attribute: "brawn",              },
{name: "Skulduggery",             attribute: "cunning",             },
{name: "Stealth",                 attribute: "agility",              },
{name: "Streetwise",              attribute: "cunning",             },
{name: "Survival",                attribute: "cunning",             },
{name: "Vigilance",               attribute: "willpower",            },
{name: "Brawl",                   attribute: "brawn",              },
{name: "Gunnery",                 attribute: "agility",              },
{name: "Melee",                   attribute: "brawn",              },
{name: "Ranged (Light)",          attribute: "agility",              alias: "rangedLight"},
{name: "Ranged (Heavy)",          attribute: "agility",              alias: "rangedHeavy"},
{name: "Core Worlds",             attribute: "intellect",             alias:"coreWorlds"},
{name: "Education",               attribute: "intellect",             },
{name: "Lore",                    attribute: "intellect",             },
{name: "Outer Rim",               attribute: "intellect",             alias: "outerRim"},
{name: "Underworld",              attribute: "intellect",             },
{name: "Xenology",                attribute: "intellect",             }]; };

app.factory("skillInfo", [function() {
    return skillsTree();
}]);

app.service("getSkillStat", ["skillInfo", function(skillInfo) {
    return function(name) {
        for (var i = 0; i < skillInfo.length; i++)
            if (skillInfo[i].name.toLowerCase() == name.toLowerCase())
                return skillInfo[i].attribute;
    }
}])

function addSkillDirective(name, attribute, directiveTitle) {
    app.directive(directiveTitle, function() {
        return {
            restrict: "A",
            link: function ($scope, $element, $attributes) {
                 var rank = 1;
                 if ($attributes[directiveTitle]) {
                     rank = parseInt($attributes[directiveTitle]);
                 }
                 $scope.$parent.model.skills[name] = {
                     rank: rank,
                     attribute: attribute
                 }
            }
        }
    });
}
var skills = skillsTree();
for (var i = 0; i < skills.length; i++) {
    var name = skills[i].alias;
    if (name == null || name == "undefined") {
        name = skills[i].name.toLowerCase();
    }
    addSkillDirective(skills[i].name, skills[i].attribute, name);
}
;/*! 
 * jdf-ngThemeSwitcher v0.1.0
 * http://jdforsythe.github.io/jdf-ngThemeSwitcher
 * Copyright (c) 2014 Jeremy Forsythe <jdforsythe@gmail.com>
 * License: MIT
 */
(function() {
	function ThemeSwitcherDirective($sce) {
		return {
			restrict: 'E',
			scope: {
				urls: '='
			},
			template: '<link rel="stylesheet" ng-href="{{url}}" ng-repeat="url in urls" />'
		};
	}

	angular.module('jdf.ngThemeSwitcher', [])
			.directive('themeSwitcher', ['$sce',ThemeSwitcherDirective]);
})();
;angular.module('swrpgwc').run(['$templateCache', function($templateCache) {$templateCache.put('/views/abilities.html','<div class="npc-abilities"><div class="npc-details-bold">Abilities:</div><div class="npc-details-normal" ng-if="abilities" dynamic="abilities"></div><div class="npc-details-normal" ng-if="!abilities">None.</div></div>');
$templateCache.put('/views/blackbox.html','<div class="cornered blackbox"><h4 ng-if="header">{{header}}</h4><p ng-transclude></p></div>');
$templateCache.put('/views/check.html','<span class="check">{{difficulty_text}} (<span ng-repeat="c in cdice track by $index"><challenge></span><span ng-repeat="p in pdice track by $index"><difficulty></span>) <span class="skill-name">{{skill}}</span> check</span>');
$templateCache.put('/views/defense-block.html','<div class="vehicle-defense-block"><div class="vehicle-defense-block-title">Def: Fore/Port/Starboard/Aft</div><div class="vehicle-defense-block-fore">{{model.fore}}</div><div class="vehicle-defense-block-port">{{model.port}}</div><div class="vehicle-defense-block-starboard">{{model.starboard}}</div><div class="vehicle-defense-block-aft">{{model.aft}}</div></div>');
$templateCache.put('/views/detailbar.html','<div class="detail-bar"><detail-block ng-if="model.soak" value="model.soak" display="soak"></detail-block><detail-block ng-if="model.wounds" value="model.wounds" display="w. threshold"></detail-block><detail-block ng-if="model.strain" value="model.strain" display="s. threshold"></detail-block></div>');
$templateCache.put('/views/detailblock.html','<div class="detail-block"><div class="detail-block-text">{{display}}</div><div class="detail-block-value">{{value}}</div></div>');
$templateCache.put('/views/diesymbol.html','<i class="die-symbol" ng-class="symbol"></i>');
$templateCache.put('/views/equipment.html','<div class="npc-equipment"><div class="npc-details-bold">Equipment:</div><div class="npc-details-normal" ng-if="equipment && equipment.weapons" ng-repeat="item in equipment.weapons"><span class="weapon-name"><span ng-if="item.quantity">{{item.quantity}} </span>{{item.name}} </span><span class="weapon-details">(<skill hide-rank="true" name="item.skill" rank="getRank(item.skill)" abty="getAbility(item.skill)" minion="isMinion()"></skill>; Damage: {{item.damage}}; Critical: {{item.critical}}; Range [<span class="weapon-range">{{item.range}}</span>]; <span ng-if="item.pierce">Piece {{item.pierce}};</span> <span ng-if="item.blast">Blast {{item.blast}};</span> <span ng-if="item.vicious">Vicious {{item.vicious}};</span> <span ng-if="item.ammo">Limited Ammo {{item.ammo}};</span> <span ng-if="item.autoFire">Auto Fire;</span> <span ng-if="item.stun">Stun setting</span> <span dynamic="item.text"></span>)</span></div><div class="npc-details-normal" ng-if="!equipment">None.</div></div>');
$templateCache.put('/views/npc.html','<div class="npc-wrapper"><h4 ng-if="model.name">{{model.name}} <span ng-if="model.rank">[{{model.rank}}]</span></h4><statbar model="model"></statbar><detailbar model="model"></detailbar><ng-transclude></ng-transclude><skills-block></skills-block><talent-block talents="model.talents"></talent-block><abilities-block abilities="model.abilities"></abilities-block><equipment-block equipment="model.equipment"></equipment-block></div>');
$templateCache.put('/views/planet.html','<md-slider-container><div flex="10" layout layout-align="center center"><span class="md-body-1">Scarcity</span></div><md-slider flex md-discrete ng-model="item" step="1" min="-2" max="4" aria-label="Scarcity"></md-slider><scarcity-display value="item" flex></scarcity-display></md-slider-container>');
$templateCache.put('/views/rarity.html','<md-slider-container><div flex="10" layout layout-align="center center"><span class="md-body-1">Rarity</span></div><md-slider flex md-discrete ng-model="item" step="1" min="1" max="10" aria-label="Rarity"></md-slider><md-input-container><input disabled="disabled" flex type="number" ng-model="item" aria-label="green" aria-controls="green-slider"></md-input-container></md-slider-container>');
$templateCache.put('/views/redbox.html','<div class="center-children redbox-wrapper"><div class="cornered redbox"><p ng-transclude></p></div></div>');
$templateCache.put('/views/scarcityDisplay.html','<md-icon md-svg-src="{{scarcityIcon()}}" class="name"></md-icon><span flex>{{scarcityText()}}</span>');
$templateCache.put('/views/skill.html','<span class="skill"><span class="skill-name">{{name}}</span> <span ng-if="!minion"><span ng-if="!hideRank">{{rank}}</span> (<span ng-repeat="p in pdice track by $index"><proficiency></proficiency></span><span ng-repeat="a in adice track by $index"><ability></ability></span>)</span><span ng-if="minion"> (varies by number)</span></span>');
$templateCache.put('/views/skills.html','<div class="npc-skills"><div class="npc-details-bold" ng-if="char.rank != \'minion\'">Skills:</div><div class="npc-details-bold" ng-if="char.rank == \'minion\'">Skills (group only):</div><div class="npc-details-normal" ng-repeat="key in skillKeys()"><skill name="key" rank="skills[key].rank" abty="getAttr(key)" minion="char.rank == \'minion\'"></skill><span ng-if="!$last">,</span><span ng-if="$last">.</span></div><div class="npc-details-normal" ng-if="skillKeys().length === 0">None.</div></div>');
$templateCache.put('/views/starship-weapon.html','<div class="npc-equipment"><div class="npc-details-bold">Weapons:</div><div class="npc-details-normal" ng-if="weapons" ng-repeat="item in weapons"><span class="weapon-name">{{item.name}} </span><span class="weapon-details">(Fire Arc {{item.fireArc}}; Damage: {{item.damage}}; Critical: {{item.critical}}; Range [<span class="weapon-range">{{item.range}}</span>]; <span ng-if="item.linked">Linked {{item.linked}};</span> <span ng-if="item.blast">Blast {{item.blast}};</span> <span ng-if="item.breach">Breach {{item.breach}};</span> <span ng-if="item.guided">Guided {{item.guided}};</span> <span ng-if="item.ammo">Limited Ammo {{item.ammo}};</span> <span ng-if="item.slowFiring">Slow Firing {{item.slowFiring}};</span> <span ng-if="item.ion">Ion;</span><span dynamic="item.text"></span>)</span><br></div><div class="npc-details-normal" ng-if="!weapons">None.</div></div>');
$templateCache.put('/views/statbar.html','<div class="stat-bar"><statblock display="Brawn" value="model.brawn"></statblock><statblock display="Agility" value="model.agility"></statblock><statblock display="Intellect" value="model.intellect"></statblock><statblock display="Cunning" value="model.cunning"></statblock><statblock display="Willpower" value="model.willpower"></statblock><statblock display="Presence" value="model.presence"></statblock></div>');
$templateCache.put('/views/statblock.html','<div class="stat-block"><div class="stat-block-value">{{value}}</div><div class="stat-block-text">{{display}}</div></div>');
$templateCache.put('/views/talents.html','<div class="npc-talents"><div class="npc-details-bold">Talents:</div><div class="npc-details-normal" ng-if="talents" dynamic="talents"></div><div class="npc-details-normal" ng-if="!talents">None.</div></div>');
$templateCache.put('/views/vehicle-statbar.html','<div class="vehicle-stat-bar"><div class="vehicle-stat-core"><statblock display="Silhouette" value="model.silhouette"></statblock><statblock display="Speed" value="model.speed"></statblock><statblock display="Handling" value="model.handling"></statblock></div><div class="vehicle-stat-attributes"><defense-block model="model"></defense-block><detail-block value="model.armor" display="Armor"></detail-block><detail-block value="model.system" display="SS Threshold"></detail-block><detail-block value="model.hull" display="HT Threshold"></detail-block></div></div>');
$templateCache.put('/views/vehicle.html','<div class="starship-wrapper"><h4 ng-if="model.name">{{model.name}}</h4><vehicle-statbar model="model"></vehicle-statbar><ng-transclude></ng-transclude><div class="npc-equipment" ng-if="model.type"><div class="npc-details-bold">Hull Type<span ng-if="model.ship">/Model</span>:</div><div class="npc-details-normal">{{model.type}}<span ng-if="model.ship">/{{model.ship}}</span></div></div><div class="npc-equipment" ng-if="model.maker"><div class="npc-details-bold">Manufacturer:</div><div class="npc-details-normal">{{model.maker}}</div></div><div class="npc-equipment"><div class="npc-details-bold">Hyperdrive:</div><div class="npc-details-normal">{{model.hyperdrive}}</div></div><div class="npc-equipment"><div class="npc-details-bold">Navicomputer:</div><div class="npc-details-normal">{{model.navicomputer}}</div></div><div class="npc-equipment"><div class="npc-details-bold">Sensor Range:</div><div class="npc-details-normal">{{model.sensorRange}}</div></div><div class="npc-equipment"><div class="npc-details-bold">Ship Complement:</div><div class="npc-details-normal">{{model.crew}}</div></div><div class="npc-equipment"><div class="npc-details-bold">Encumbrance Capacity:</div><div class="npc-details-normal">{{model.encum}}</div></div><div class="npc-equipment"><div class="npc-details-bold">Passenger Capacity:</div><div class="npc-details-normal">{{model.passengers}}</div></div><div class="npc-equipment" ng-if="model.consumables"><div class="npc-details-bold">Consumables:</div><div class="npc-details-normal">{{model.consumables}}</div></div><div class="npc-equipment" ng-if="model.price"><div class="npc-details-bold">Price<span ng-if="model.rarity">/Rarity</span>:</div><div class="npc-details-normal">{{model.price}} credits<span ng-if="model.rarity">/{{model.rarity}}</span></div></div><div class="npc-equipment"><div class="npc-details-bold">Customization Hard Points:</div><div class="npc-details-normal">{{model.hardpoints}}</div></div><starship-weapons-block weapons="model.weapons"></starship-weapons-block></div>');}]);